{"version":3,"sources":["actions/index.js","components/Header.js","components/NewGroup.js","hc.js","components/Sidebar.js","components/Chat.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["actions","channels","arguments","length","undefined","type","users","profile","channel","chat","Header","react_default","a","createElement","alt","src","className","href","Component","NewGroup","_ref","onClick","hc","functionName","_ref$params","params","_ref$callback","callback","_","connect","then","_ref2","callZome","close","result","console","log","concat","JSON","parse","Label","name","title","toUpperCase","Sidebar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateMyChannels","data","loadMyChannels","Ok","updateChannels","loadChannels","updateConversations","loadConversations","updateUsers","loadUsers","updateAll","clickUser","e","clickChannel","loadCurrentChannel","loadCurrentChat","address","res","createChannel","prompt","entry","description","setTimeout","_this2","components_NewGroup","role","aria-label","myChannels","map","c","i","Sidebar_Label","key","conversations","u","username","dispatch","Chat","inputRef","React","createRef","sendMessage","text","current","value","content","channel_address","currentChannel","cc","msjs","Fragment","m","author","me","ref","onKeyDown","keyCode","placeholder","disabled","App","state","logged","handleUsernameChange","setState","target","join","alert","registered","updateProfile","Header_Header","components_Sidebar","components_Chat","Boolean","window","location","hostname","match","combineReducers","action","messages","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fe51615f.chunk.js","sourcesContent":["export default {\n    loadChannels:(channels=[],dispatch)=>{\n        dispatch({ type:'CHANNELS_UPDATE' , channels })\n    },\n    loadMyChannels:(channels=[],dispatch)=>{\n        dispatch({ type:'MY_CHANNELS_UPDATE' , channels })\n    },\n    loadConversations:(channels=[],dispatch)=>{\n        dispatch({ type:'CONVERSATIONS_UPDATE' , channels })\n    },\n    loadUsers:(users=[],dispatch)=>{\n        dispatch({ type:'USERS_UPDATE' , users })\n    },\n    updateProfile:(profile={},dispatch)=>{\n        dispatch({ type:'PROFILE_UPDATE' , profile })\n    },\n    loadCurrentChannel:(channel={},dispatch)=>{\n        dispatch({ type:'UPDATE_CHANNEL' , channel })\n    },\n    loadCurrentChat:(chat=[],dispatch)=>{//array of messages\n        dispatch({ type:'UPDATE_CHAT' , chat })\n    }\n}","import React, { Component } from \"react\";\nimport \"../css/header.css\";\nexport default class Header extends Component {\n    render() {\n        return (\n            <header>\n                <div>\n                    <img\n                        alt=\"Planet\"\n                        src='/img/Proposal of graphic identidy planet-09.png'\n                        className=\"logo\"\n                    />\n                </div>\n\n                <div className=\"links\">\n                    <a href=\"/\" className=\"link\">\n                        Community\n                    </a>\n                    <a href=\"/\" className=\"link\">\n                        Exchange\n                    </a>\n                    <a href=\"/\" className=\"link\">\n                        User\n                    </a>\n                </div>\n            </header>\n        );\n    }\n}\n","import React from \"react\";\n\nconst NewGroup = ({onClick}) => (\n    <div className=\"newGroup\" onClick={onClick}>\n        <div className=\"content\">\n            <div className=\"circle\">\n                <span>+</span>\n            </div>\n            <span>New Channel</span>\n        </div>\n    </div>\n);\n\nexport default NewGroup;\n","import { connect } from '@holochain/hc-web-client'\n\nconst is_the_connection_a_test = true\n\nexport default ({ functionName , params = {} , callback = _ => {} }) => {\n    let promise\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n        // dev code\n        promise = connect(\"ws://localhost:8888\")\n    } else {\n        // production code\n        promise = connect()\n    }\n    promise.then(({callZome, close}) => {\n        callZome(is_the_connection_a_test?'test-instance':'holo-chat','messaging' , functionName )( params ).then((result) => {\n            console.log(`HC CALL: ${functionName}, received `,result)\n            callback(JSON.parse(result))\n            close()\n        })\n    })\n}","import React, { Component } from \"react\"\nimport NewGroup from \"./NewGroup\"\n// import Me from \"./Me\"\n// import User from \"./User\"\n\nimport { connect } from 'react-redux'\nimport \"../css/sidebar.css\"\nimport \"../css/user.css\"\n\nimport actions from '../actions'\nimport hc from \"../hc\";\n\nconst Label = ({name,title,onClick}) => (\n    <div className=\"user\" onClick={onClick}>\n        <div className=\"circle\">{name && name[0].toUpperCase()}</div>\n        <span className=\"text\">{name}</span>\n    </div>\n)\n\nclass Sidebar extends Component {\n    constructor(props){\n        super(props)\n        this.updateAll()\n    }\n    updateMyChannels = () => {\n        hc({\n            functionName : 'get_my_channels',\n            callback : data => {\n                this.props.loadMyChannels(data.Ok)\n            }\n        })\n    }\n    updateChannels = () => {\n        hc({\n            functionName : 'get_all_channels',\n            callback : data => {\n                this.props.loadChannels(data.Ok)\n            }\n        })\n    }\n    updateConversations = () => {\n        hc({\n            functionName : 'get_my_conversations',\n            callback : data => {\n                this.props.loadConversations(data.Ok)\n            }\n        })\n    }\n    updateUsers = () => {\n        hc({\n            functionName : 'get_all_users',\n            callback : data => {\n                this.props.loadUsers(data.Ok)\n            }\n        })\n    }\n    updateAll = () => {\n        this.updateMyChannels()\n        //this.updateConversations()\n    }\n    clickUser = e => {}\n    clickChannel = channel => {\n        this.props.loadCurrentChannel(channel)\n        this.props.loadCurrentChat([])\n        hc({\n            functionName:'get_messages_from_channel',\n            params : {\n                channel : channel.address\n            },\n            callback : res => {\n                this.props.loadCurrentChat(res.Ok)\n            }\n        })\n    }\n    createChannel = () => {\n        let name = prompt('insert the name of the channel')\n        if ( !name ) {\n            return\n        }\n        hc({\n            functionName : 'create_channel',\n            params : {\n                entry:{\n                    title : name,\n                    description : 'default description',\n                }\n            },\n            callback : res => {\n                console.log(res)\n                setTimeout(()=>{\n                    this.updateMyChannels()\n                },300)\n                this.updateMyChannels()\n            }\n        })\n    }\n    render() {\n        return (\n            <div className=\"sidebar\">\n                <NewGroup onClick={this.createChannel}/>\n                <button className='reloader' onClick={this.updateAll}>\n                    <span role=\"img\" aria-label=''>🔄</span> Update\n                </button>\n                <div className=\"chats\">\n                    <div className=\"divider\">My Channels</div>\n                    {\n                        this.props.myChannels &&\n                        this.props.myChannels.length > 0 &&\n                        this.props.myChannels.map((c,i)=><Label key={i} name={c.entry.title} onClick={e=>this.clickChannel(c)} />)\n                    }\n                    <div className='join'>Join a channel!</div>\n                    <div className=\"divider\">Conversations</div>\n                    {\n                        this.props.conversations &&\n                        this.props.conversations.length > 0 &&\n                        this.props.conversations.map((u,i)=><Label key={i} name={u.entry.username} onClick={this.clickUser} />)\n                    }\n                    <div className='join'>Start a conversation!</div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({conversations, myChannels}) => ({conversations,myChannels})\n\nconst mapDispatchToProps = dispatch => ({\n    loadMyChannels: data => actions.loadMyChannels(data, dispatch),\n    loadChannels: data => actions.loadChannels(data, dispatch),\n    loadConversations: data => actions.loadConversations(data, dispatch),\n    loadUsers: data => actions.loadUsers(data, dispatch),\n    loadCurrentChannel: data => actions.loadCurrentChannel(data, dispatch),\n    loadCurrentChat: data => actions.loadCurrentChat(data, dispatch)\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Sidebar)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport '../css/chat.css'\nimport hc from '../hc'\nimport actions from '../actions'\n\nclass Chat extends React.Component {\n    inputRef = React.createRef()\n    sendMessage = e => {\n        let text = this.inputRef.current.value\n        if (!text) {\n            return\n        }\n        this.inputRef.current.value = ''\n        hc({\n            functionName:'send_message',\n            params:{\n                entry:{\n                    content : text\n                },\n                channel_address : this.props.currentChannel.address\n            },\n            callback:()=>{\n                setTimeout(\n                    ()=>{\n                        hc({\n                            functionName:'get_messages_from_channel',\n                            params : {\n                                channel : this.props.currentChannel.address\n                            },\n                            callback : res => {\n                                this.props.loadCurrentChat(res.Ok)\n                            }\n                        })\n                    },\n                    300\n                )\n            }\n        })\n    }\n    render() {\n        const cc = this.props.currentChannel,\n            msjs = this.props.chat\n        console.log('msjs', msjs)\n        return (\n            <div className='chat'>\n                <div className='descriptor'>\n                    <h4>{cc ? cc.entry.title : <>Select a chat</>}</h4>\n                    <small>{cc ? cc.entry.description : <>Join the Planet!</>}</small>\n                </div>\n                <div className='messages'>\n                    {\n                        msjs &&\n                        msjs.length > 0 &&\n                        msjs.map((m,i)=>(\n                            <div key={i} className={ m.entry.author === this.props.me.address && 'me'}>\n                                {m.entry.content}\n                            </div>\n                        ))\n                    }\n                </div>\n                <div className='message-input'>\n                    <input ref={this.inputRef} onKeyDown={e=>e.keyCode===13?this.sendMessage():null} placeholder='Write something!' disabled={cc?'':true}/>\n                    <button disabled={cc?'':true} onClick={this.sendMessage}>\n                        Send\n                        <span role='img' aria-label=''>➡️</span>\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = ({chat,currentChannel,me}) => ({\n    chat,\n    currentChannel,\n    me\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadCurrentChat: data => actions.loadCurrentChat(data, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat)\n","import React from \"react\"\nimport { connect } from 'react-redux'\n\nimport actions from './actions'\nimport Header from \"./components/Header\"\nimport Sidebar from \"./components/Sidebar\"\n\nimport hc from './hc'\n\nimport \"./css/profile_popup.css\"\nimport Chat from \"./components/Chat\";\n\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n        hc({\n            functionName: 'check_register',\n            callback: data=>{\n                if (data && data.Ok && data.Ok.registered) {\n                    let me = JSON.parse(data.Ok.me.App[1])\n                    this.props.updateProfile(me)\n                    this.setState({logged:true})\n                }\n            }\n        })\n    }\n    state = {\n        logged : false,\n        username : null\n    }\n    handleUsernameChange = e => {\n        this.setState({\n            username: e.target.value\n        })\n        if ( e.keyCode === 13 ){\n            this.join(e.target.value)\n        }\n    }\n    join = username => {\n        hc({\n            functionName: 'create_user',\n            params: {\n                username: username\n            },\n            callback: (result) =>{\n                if(result.Ok){\n                    this.setState({logged:true})\n                }else{\n                    alert('error')\n                    console.log(result)\n                }\n            }\n        })\n    }\n    render(){\n        if(!this.state.logged){\n            return (\n                <div className='register-section'>\n                    <h3>Welcome to Planet Chat!</h3>\n                    <input onKeyDown={this.handleUsernameChange} placeholder=\"Insert your username\"/>\n                    <button onClick={e=>this.join(this.state.username)}>Join</button>\n                </div>\n            )\n        }\n        return (\n            <>\n                <Header/>\n                <main>\n                    <Sidebar />\n                    <Chat />\n                </main>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = () => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    updateProfile: data => actions.updateProfile(data, dispatch),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\n\nfunction channels( channels = [] , action ){\n    console.log(action.type,action)\n    if (action.type !== 'CHANNELS_UPDATE') {\n        return channels\n    }\n    return action.channels\n}\n\nfunction users(users=[],action) {\n    if (action.type !== 'USERS_UPDATE') {\n        return users\n    }\n    return action.users\n}\nfunction conversations(users=[], action) {\n    if (action.type !== 'CONVERSATIONS_UPDATE') {\n        return users\n    }\n    return action.users\n}\nfunction myChannels(channels=[], action) {\n    if (action.type !== 'MY_CHANNELS_UPDATE') {\n        return channels\n    }\n    return action.channels\n}\n\nfunction me(profile=null, action) {\n    if (action.type !== 'PROFILE_UPDATE') {\n        return profile\n    }\n    return action.profile\n}\nfunction messages(messages=[], action) {\n    if (action.type !== 'UPDATE_MESSAGES') {\n        return messages\n    }\n    return action.messages\n}\nfunction currentChannel(cc = null ,action) {\n    if (action.type !== 'UPDATE_CHANNEL') {\n        return cc\n    }\n    return action.channel\n}\nfunction chat(chat=null,action) {\n    if (action.type !== 'UPDATE_CHAT') {\n        return chat\n    }\n    return action.chat\n}\nexport default combineReducers({\n    currentChannel,\n    conversations,\n    myChannels,\n    channels,\n    messages,\n    users,\n    chat,\n    me\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}